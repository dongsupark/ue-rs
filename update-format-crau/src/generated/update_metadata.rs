// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `update_metadata.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  The client will perform each InstallOperation in order, beginning even
///  before the entire delta file is downloaded (but after at least the
///  protobuf is downloaded). The types of operations are explained:
///  - REPLACE: Replace the dst_extents on the drive with the attached data,
///    zero padding out to block size.
///  - REPLACE_BZ: bzip2-uncompress the attached data and write it into
///    dst_extents on the drive, zero padding to block size.
///  - MOVE: Copy the data in src_extents to dst_extents. Extents may overlap,
///    so it may be desirable to read all src_extents data into memory before
///    writing it out.
///  - BSDIFF: Read src_length bytes from src_extents into memory, perform
///    bspatch with attached data, write new data to dst_extents, zero padding
///    to block size.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:chromeos_update_engine.InstallOperation)
pub struct InstallOperation {
    // message fields
    // @@protoc_insertion_point(field:chromeos_update_engine.InstallOperation.type)
    pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<install_operation::Type>>,
    ///  The offset into the delta file (after the protobuf)
    ///  where the data (if any) is stored
    // @@protoc_insertion_point(field:chromeos_update_engine.InstallOperation.data_offset)
    pub data_offset: ::std::option::Option<u32>,
    ///  The length of the data in the delta file
    // @@protoc_insertion_point(field:chromeos_update_engine.InstallOperation.data_length)
    pub data_length: ::std::option::Option<u32>,
    ///  Ordered list of extents that are read from (if any) and written to.
    // @@protoc_insertion_point(field:chromeos_update_engine.InstallOperation.src_extents)
    pub src_extents: ::std::vec::Vec<Extent>,
    ///  Byte length of src, not necessarily block aligned. It's only used for
    ///  BSDIFF, because we need to pass that external program the number
    ///  of bytes to read from the blocks we pass it.
    // @@protoc_insertion_point(field:chromeos_update_engine.InstallOperation.src_length)
    pub src_length: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:chromeos_update_engine.InstallOperation.dst_extents)
    pub dst_extents: ::std::vec::Vec<Extent>,
    ///  byte length of dst, not necessarily block aligned. It's only used for
    ///  BSDIFF, because we need to fill in the rest of the last block
    ///  that bsdiff writes with '\0' bytes.
    // @@protoc_insertion_point(field:chromeos_update_engine.InstallOperation.dst_length)
    pub dst_length: ::std::option::Option<u64>,
    ///  Required SHA 256 hash of the blob associated with this operation.
    ///  This is used as a primary validation for http-based downloads and
    ///  as a defense-in-depth validation for https-based downloads. If
    ///  the operation doesn't refer to any blob, this field will have
    ///  zero bytes.
    // @@protoc_insertion_point(field:chromeos_update_engine.InstallOperation.data_sha256_hash)
    pub data_sha256_hash: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:chromeos_update_engine.InstallOperation.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InstallOperation {
    fn default() -> &'a InstallOperation {
        <InstallOperation as ::protobuf::Message>::default_instance()
    }
}

impl InstallOperation {
    pub fn new() -> InstallOperation {
        ::std::default::Default::default()
    }

    // required .chromeos_update_engine.InstallOperation.Type type = 1;

    pub fn type_(&self) -> install_operation::Type {
        match self.type_ {
            Some(e) => e.enum_value_or(install_operation::Type::REPLACE),
            None => install_operation::Type::REPLACE,
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: install_operation::Type) {
        self.type_ = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // optional uint32 data_offset = 2;

    pub fn data_offset(&self) -> u32 {
        self.data_offset.unwrap_or(0)
    }

    pub fn clear_data_offset(&mut self) {
        self.data_offset = ::std::option::Option::None;
    }

    pub fn has_data_offset(&self) -> bool {
        self.data_offset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data_offset(&mut self, v: u32) {
        self.data_offset = ::std::option::Option::Some(v);
    }

    // optional uint32 data_length = 3;

    pub fn data_length(&self) -> u32 {
        self.data_length.unwrap_or(0)
    }

    pub fn clear_data_length(&mut self) {
        self.data_length = ::std::option::Option::None;
    }

    pub fn has_data_length(&self) -> bool {
        self.data_length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data_length(&mut self, v: u32) {
        self.data_length = ::std::option::Option::Some(v);
    }

    // optional uint64 src_length = 5;

    pub fn src_length(&self) -> u64 {
        self.src_length.unwrap_or(0)
    }

    pub fn clear_src_length(&mut self) {
        self.src_length = ::std::option::Option::None;
    }

    pub fn has_src_length(&self) -> bool {
        self.src_length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_src_length(&mut self, v: u64) {
        self.src_length = ::std::option::Option::Some(v);
    }

    // optional uint64 dst_length = 7;

    pub fn dst_length(&self) -> u64 {
        self.dst_length.unwrap_or(0)
    }

    pub fn clear_dst_length(&mut self) {
        self.dst_length = ::std::option::Option::None;
    }

    pub fn has_dst_length(&self) -> bool {
        self.dst_length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dst_length(&mut self, v: u64) {
        self.dst_length = ::std::option::Option::Some(v);
    }

    // optional bytes data_sha256_hash = 8;

    pub fn data_sha256_hash(&self) -> &[u8] {
        match self.data_sha256_hash.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_data_sha256_hash(&mut self) {
        self.data_sha256_hash = ::std::option::Option::None;
    }

    pub fn has_data_sha256_hash(&self) -> bool {
        self.data_sha256_hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data_sha256_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.data_sha256_hash = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data_sha256_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.data_sha256_hash.is_none() {
            self.data_sha256_hash = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.data_sha256_hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_data_sha256_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.data_sha256_hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &InstallOperation| { &m.type_ },
            |m: &mut InstallOperation| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "data_offset",
            |m: &InstallOperation| { &m.data_offset },
            |m: &mut InstallOperation| { &mut m.data_offset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "data_length",
            |m: &InstallOperation| { &m.data_length },
            |m: &mut InstallOperation| { &mut m.data_length },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "src_extents",
            |m: &InstallOperation| { &m.src_extents },
            |m: &mut InstallOperation| { &mut m.src_extents },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "src_length",
            |m: &InstallOperation| { &m.src_length },
            |m: &mut InstallOperation| { &mut m.src_length },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "dst_extents",
            |m: &InstallOperation| { &m.dst_extents },
            |m: &mut InstallOperation| { &mut m.dst_extents },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "dst_length",
            |m: &InstallOperation| { &m.dst_length },
            |m: &mut InstallOperation| { &mut m.dst_length },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "data_sha256_hash",
            |m: &InstallOperation| { &m.data_sha256_hash },
            |m: &mut InstallOperation| { &mut m.data_sha256_hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InstallOperation>(
            "InstallOperation",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InstallOperation {
    const NAME: &'static str = "InstallOperation";

    fn is_initialized(&self) -> bool {
        if self.type_.is_none() {
            return false;
        }
        for v in &self.src_extents {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.dst_extents {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                16 => {
                    self.data_offset = ::std::option::Option::Some(is.read_uint32()?);
                },
                24 => {
                    self.data_length = ::std::option::Option::Some(is.read_uint32()?);
                },
                34 => {
                    self.src_extents.push(is.read_message()?);
                },
                40 => {
                    self.src_length = ::std::option::Option::Some(is.read_uint64()?);
                },
                50 => {
                    self.dst_extents.push(is.read_message()?);
                },
                56 => {
                    self.dst_length = ::std::option::Option::Some(is.read_uint64()?);
                },
                66 => {
                    self.data_sha256_hash = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        if let Some(v) = self.data_offset {
            my_size += ::protobuf::rt::uint32_size(2, v);
        }
        if let Some(v) = self.data_length {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        for value in &self.src_extents {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.src_length {
            my_size += ::protobuf::rt::uint64_size(5, v);
        }
        for value in &self.dst_extents {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.dst_length {
            my_size += ::protobuf::rt::uint64_size(7, v);
        }
        if let Some(v) = self.data_sha256_hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(8, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_ {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.data_offset {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.data_length {
            os.write_uint32(3, v)?;
        }
        for v in &self.src_extents {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if let Some(v) = self.src_length {
            os.write_uint64(5, v)?;
        }
        for v in &self.dst_extents {
            ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
        };
        if let Some(v) = self.dst_length {
            os.write_uint64(7, v)?;
        }
        if let Some(v) = self.data_sha256_hash.as_ref() {
            os.write_bytes(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InstallOperation {
        InstallOperation::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.data_offset = ::std::option::Option::None;
        self.data_length = ::std::option::Option::None;
        self.src_extents.clear();
        self.src_length = ::std::option::Option::None;
        self.dst_extents.clear();
        self.dst_length = ::std::option::Option::None;
        self.data_sha256_hash = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InstallOperation {
        static instance: InstallOperation = InstallOperation {
            type_: ::std::option::Option::None,
            data_offset: ::std::option::Option::None,
            data_length: ::std::option::Option::None,
            src_extents: ::std::vec::Vec::new(),
            src_length: ::std::option::Option::None,
            dst_extents: ::std::vec::Vec::new(),
            dst_length: ::std::option::Option::None,
            data_sha256_hash: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InstallOperation {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InstallOperation").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InstallOperation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstallOperation {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `InstallOperation`
pub mod install_operation {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:chromeos_update_engine.InstallOperation.Type)
    pub enum Type {
        // @@protoc_insertion_point(enum_value:chromeos_update_engine.InstallOperation.Type.REPLACE)
        REPLACE = 0,
        // @@protoc_insertion_point(enum_value:chromeos_update_engine.InstallOperation.Type.REPLACE_BZ)
        REPLACE_BZ = 1,
        // @@protoc_insertion_point(enum_value:chromeos_update_engine.InstallOperation.Type.MOVE)
        MOVE = 2,
        // @@protoc_insertion_point(enum_value:chromeos_update_engine.InstallOperation.Type.BSDIFF)
        BSDIFF = 3,
    }

    impl ::protobuf::Enum for Type {
        const NAME: &'static str = "Type";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Type> {
            match value {
                0 => ::std::option::Option::Some(Type::REPLACE),
                1 => ::std::option::Option::Some(Type::REPLACE_BZ),
                2 => ::std::option::Option::Some(Type::MOVE),
                3 => ::std::option::Option::Some(Type::BSDIFF),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Type] = &[
            Type::REPLACE,
            Type::REPLACE_BZ,
            Type::MOVE,
            Type::BSDIFF,
        ];
    }

    impl ::protobuf::EnumFull for Type {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("InstallOperation.Type").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Type {
        fn default() -> Self {
            Type::REPLACE
        }
    }

    impl Type {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("InstallOperation.Type")
        }
    }
}

///  Data is packed into blocks on disk, always starting from the beginning
///  of the block. If a file's data is too large for one block, it overflows
///  into another block, which may or may not be the following block on the
///  physical partition. An ordered list of extents is another
///  representation of an ordered list of blocks. For example, a file stored
///  in blocks 9, 10, 11, 2, 18, 12 (in that order) would be stored in
///  extents { {9, 3}, {2, 1}, {18, 1}, {12, 1} } (in that order).
///  In general, files are stored sequentially on disk, so it's more efficient
///  to use extents to encode the block lists (this is effectively
///  run-length encoding).
///  A sentinel value (UINT64_MAX) as the start block denotes a sparse-hole
///  in a file whose block-length is specified by num_blocks.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:chromeos_update_engine.Extent)
pub struct Extent {
    // message fields
    // @@protoc_insertion_point(field:chromeos_update_engine.Extent.start_block)
    pub start_block: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:chromeos_update_engine.Extent.num_blocks)
    pub num_blocks: ::std::option::Option<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:chromeos_update_engine.Extent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Extent {
    fn default() -> &'a Extent {
        <Extent as ::protobuf::Message>::default_instance()
    }
}

impl Extent {
    pub fn new() -> Extent {
        ::std::default::Default::default()
    }

    // optional uint64 start_block = 1;

    pub fn start_block(&self) -> u64 {
        self.start_block.unwrap_or(0)
    }

    pub fn clear_start_block(&mut self) {
        self.start_block = ::std::option::Option::None;
    }

    pub fn has_start_block(&self) -> bool {
        self.start_block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_block(&mut self, v: u64) {
        self.start_block = ::std::option::Option::Some(v);
    }

    // optional uint64 num_blocks = 2;

    pub fn num_blocks(&self) -> u64 {
        self.num_blocks.unwrap_or(0)
    }

    pub fn clear_num_blocks(&mut self) {
        self.num_blocks = ::std::option::Option::None;
    }

    pub fn has_num_blocks(&self) -> bool {
        self.num_blocks.is_some()
    }

    // Param is passed by value, moved
    pub fn set_num_blocks(&mut self, v: u64) {
        self.num_blocks = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "start_block",
            |m: &Extent| { &m.start_block },
            |m: &mut Extent| { &mut m.start_block },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "num_blocks",
            |m: &Extent| { &m.num_blocks },
            |m: &mut Extent| { &mut m.num_blocks },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Extent>(
            "Extent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Extent {
    const NAME: &'static str = "Extent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.start_block = ::std::option::Option::Some(is.read_uint64()?);
                },
                16 => {
                    self.num_blocks = ::std::option::Option::Some(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.start_block {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.num_blocks {
            my_size += ::protobuf::rt::uint64_size(2, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.start_block {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.num_blocks {
            os.write_uint64(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Extent {
        Extent::new()
    }

    fn clear(&mut self) {
        self.start_block = ::std::option::Option::None;
        self.num_blocks = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Extent {
        static instance: Extent = Extent {
            start_block: ::std::option::Option::None,
            num_blocks: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Extent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Extent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Extent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Extent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Signatures: Updates may be signed by the OS vendor. The client verifies
///  an update's signature by hashing the entire download. The section of the
///  download that contains the signature is at the end of the file, so when
///  signing a file, only the part up to the signature part is signed.
///  Then, the client looks inside the download's Signatures message for a
///  Signature message that it knows how to handle. Generally, a client will
///  only know how to handle one type of signature, but an update may contain
///  many signatures to support many different types of client. Then client
///  selects a Signature message and uses that, along with a known public key,
///  to verify the download. The public key is expected to be part of the
///  client.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:chromeos_update_engine.Signatures)
pub struct Signatures {
    // message fields
    // @@protoc_insertion_point(field:chromeos_update_engine.Signatures.signatures)
    pub signatures: ::std::vec::Vec<signatures::Signature>,
    // special fields
    // @@protoc_insertion_point(special_field:chromeos_update_engine.Signatures.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Signatures {
    fn default() -> &'a Signatures {
        <Signatures as ::protobuf::Message>::default_instance()
    }
}

impl Signatures {
    pub fn new() -> Signatures {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "signatures",
            |m: &Signatures| { &m.signatures },
            |m: &mut Signatures| { &mut m.signatures },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Signatures>(
            "Signatures",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Signatures {
    const NAME: &'static str = "Signatures";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.signatures.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.signatures {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.signatures {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Signatures {
        Signatures::new()
    }

    fn clear(&mut self) {
        self.signatures.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Signatures {
        static instance: Signatures = Signatures {
            signatures: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Signatures {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Signatures").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Signatures {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Signatures {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Signatures`
pub mod signatures {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:chromeos_update_engine.Signatures.Signature)
    pub struct Signature {
        // message fields
        // @@protoc_insertion_point(field:chromeos_update_engine.Signatures.Signature.version)
        pub version: ::std::option::Option<u32>,
        // @@protoc_insertion_point(field:chromeos_update_engine.Signatures.Signature.data)
        pub data: ::std::option::Option<::std::vec::Vec<u8>>,
        // special fields
        // @@protoc_insertion_point(special_field:chromeos_update_engine.Signatures.Signature.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Signature {
        fn default() -> &'a Signature {
            <Signature as ::protobuf::Message>::default_instance()
        }
    }

    impl Signature {
        pub fn new() -> Signature {
            ::std::default::Default::default()
        }

        // optional uint32 version = 1;

        pub fn version(&self) -> u32 {
            self.version.unwrap_or(0)
        }

        pub fn clear_version(&mut self) {
            self.version = ::std::option::Option::None;
        }

        pub fn has_version(&self) -> bool {
            self.version.is_some()
        }

        // Param is passed by value, moved
        pub fn set_version(&mut self, v: u32) {
            self.version = ::std::option::Option::Some(v);
        }

        // optional bytes data = 2;

        pub fn data(&self) -> &[u8] {
            match self.data.as_ref() {
                Some(v) => v,
                None => &[],
            }
        }

        pub fn clear_data(&mut self) {
            self.data = ::std::option::Option::None;
        }

        pub fn has_data(&self) -> bool {
            self.data.is_some()
        }

        // Param is passed by value, moved
        pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
            self.data = ::std::option::Option::Some(v);
        }

        // Mutable pointer to the field.
        // If field is not initialized, it is initialized with default value first.
        pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
            if self.data.is_none() {
                self.data = ::std::option::Option::Some(::std::vec::Vec::new());
            }
            self.data.as_mut().unwrap()
        }

        // Take field
        pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
            self.data.take().unwrap_or_else(|| ::std::vec::Vec::new())
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "version",
                |m: &Signature| { &m.version },
                |m: &mut Signature| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
                "data",
                |m: &Signature| { &m.data },
                |m: &mut Signature| { &mut m.data },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Signature>(
                "Signatures.Signature",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Signature {
        const NAME: &'static str = "Signature";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.version = ::std::option::Option::Some(is.read_uint32()?);
                    },
                    18 => {
                        self.data = ::std::option::Option::Some(is.read_bytes()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if let Some(v) = self.version {
                my_size += ::protobuf::rt::uint32_size(1, v);
            }
            if let Some(v) = self.data.as_ref() {
                my_size += ::protobuf::rt::bytes_size(2, &v);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if let Some(v) = self.version {
                os.write_uint32(1, v)?;
            }
            if let Some(v) = self.data.as_ref() {
                os.write_bytes(2, v)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Signature {
            Signature::new()
        }

        fn clear(&mut self) {
            self.version = ::std::option::Option::None;
            self.data = ::std::option::Option::None;
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Signature {
            static instance: Signature = Signature {
                version: ::std::option::Option::None,
                data: ::std::option::Option::None,
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Signature {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("Signatures.Signature").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Signature {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Signature {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:chromeos_update_engine.InstallInfo)
pub struct InstallInfo {
    // message fields
    // @@protoc_insertion_point(field:chromeos_update_engine.InstallInfo.size)
    pub size: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:chromeos_update_engine.InstallInfo.hash)
    pub hash: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:chromeos_update_engine.InstallInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InstallInfo {
    fn default() -> &'a InstallInfo {
        <InstallInfo as ::protobuf::Message>::default_instance()
    }
}

impl InstallInfo {
    pub fn new() -> InstallInfo {
        ::std::default::Default::default()
    }

    // optional uint64 size = 1;

    pub fn size(&self) -> u64 {
        self.size.unwrap_or(0)
    }

    pub fn clear_size(&mut self) {
        self.size = ::std::option::Option::None;
    }

    pub fn has_size(&self) -> bool {
        self.size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_size(&mut self, v: u64) {
        self.size = ::std::option::Option::Some(v);
    }

    // optional bytes hash = 2;

    pub fn hash(&self) -> &[u8] {
        match self.hash.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_hash(&mut self) {
        self.hash = ::std::option::Option::None;
    }

    pub fn has_hash(&self) -> bool {
        self.hash.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.hash.is_none() {
            self.hash = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.hash.as_mut().unwrap()
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        self.hash.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "size",
            |m: &InstallInfo| { &m.size },
            |m: &mut InstallInfo| { &mut m.size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "hash",
            |m: &InstallInfo| { &m.hash },
            |m: &mut InstallInfo| { &mut m.hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InstallInfo>(
            "InstallInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InstallInfo {
    const NAME: &'static str = "InstallInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.size = ::std::option::Option::Some(is.read_uint64()?);
                },
                18 => {
                    self.hash = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.size {
            my_size += ::protobuf::rt::uint64_size(1, v);
        }
        if let Some(v) = self.hash.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.size {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.hash.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InstallInfo {
        InstallInfo::new()
    }

    fn clear(&mut self) {
        self.size = ::std::option::Option::None;
        self.hash = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InstallInfo {
        static instance: InstallInfo = InstallInfo {
            size: ::std::option::Option::None,
            hash: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InstallInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InstallInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InstallInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstallInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  InstallProcedure defines the update procedure for a single file or block
///  device (except for /usr which is in DeltaArchiveManifest).
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:chromeos_update_engine.InstallProcedure)
pub struct InstallProcedure {
    // message fields
    // @@protoc_insertion_point(field:chromeos_update_engine.InstallProcedure.type)
    pub type_: ::std::option::Option<::protobuf::EnumOrUnknown<install_procedure::Type>>,
    // @@protoc_insertion_point(field:chromeos_update_engine.InstallProcedure.operations)
    pub operations: ::std::vec::Vec<InstallOperation>,
    // @@protoc_insertion_point(field:chromeos_update_engine.InstallProcedure.old_info)
    pub old_info: ::protobuf::MessageField<InstallInfo>,
    // @@protoc_insertion_point(field:chromeos_update_engine.InstallProcedure.new_info)
    pub new_info: ::protobuf::MessageField<InstallInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:chromeos_update_engine.InstallProcedure.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InstallProcedure {
    fn default() -> &'a InstallProcedure {
        <InstallProcedure as ::protobuf::Message>::default_instance()
    }
}

impl InstallProcedure {
    pub fn new() -> InstallProcedure {
        ::std::default::Default::default()
    }

    // optional .chromeos_update_engine.InstallProcedure.Type type = 1;

    pub fn type_(&self) -> install_procedure::Type {
        match self.type_ {
            Some(e) => e.enum_value_or(install_procedure::Type::KERNEL),
            None => install_procedure::Type::KERNEL,
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: install_procedure::Type) {
        self.type_ = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &InstallProcedure| { &m.type_ },
            |m: &mut InstallProcedure| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "operations",
            |m: &InstallProcedure| { &m.operations },
            |m: &mut InstallProcedure| { &mut m.operations },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, InstallInfo>(
            "old_info",
            |m: &InstallProcedure| { &m.old_info },
            |m: &mut InstallProcedure| { &mut m.old_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, InstallInfo>(
            "new_info",
            |m: &InstallProcedure| { &m.new_info },
            |m: &mut InstallProcedure| { &mut m.new_info },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InstallProcedure>(
            "InstallProcedure",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InstallProcedure {
    const NAME: &'static str = "InstallProcedure";

    fn is_initialized(&self) -> bool {
        for v in &self.operations {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.old_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.new_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.type_ = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                18 => {
                    self.operations.push(is.read_message()?);
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.old_info)?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.new_info)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_ {
            my_size += ::protobuf::rt::int32_size(1, v.value());
        }
        for value in &self.operations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.old_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.new_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_ {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        for v in &self.operations {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.old_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        if let Some(v) = self.new_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InstallProcedure {
        InstallProcedure::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.operations.clear();
        self.old_info.clear();
        self.new_info.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InstallProcedure {
        static instance: InstallProcedure = InstallProcedure {
            type_: ::std::option::Option::None,
            operations: ::std::vec::Vec::new(),
            old_info: ::protobuf::MessageField::none(),
            new_info: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InstallProcedure {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InstallProcedure").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InstallProcedure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstallProcedure {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `InstallProcedure`
pub mod install_procedure {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    // @@protoc_insertion_point(enum:chromeos_update_engine.InstallProcedure.Type)
    pub enum Type {
        // @@protoc_insertion_point(enum_value:chromeos_update_engine.InstallProcedure.Type.KERNEL)
        KERNEL = 0,
        // @@protoc_insertion_point(enum_value:chromeos_update_engine.InstallProcedure.Type.PCR_POLICY)
        PCR_POLICY = 1,
    }

    impl ::protobuf::Enum for Type {
        const NAME: &'static str = "Type";

        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<Type> {
            match value {
                0 => ::std::option::Option::Some(Type::KERNEL),
                1 => ::std::option::Option::Some(Type::PCR_POLICY),
                _ => ::std::option::Option::None
            }
        }

        const VALUES: &'static [Type] = &[
            Type::KERNEL,
            Type::PCR_POLICY,
        ];
    }

    impl ::protobuf::EnumFull for Type {
        fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().enum_by_package_relative_name("InstallProcedure.Type").unwrap()).clone()
        }

        fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
            let index = *self as usize;
            Self::enum_descriptor().value_by_index(index)
        }
    }

    impl ::std::default::Default for Type {
        fn default() -> Self {
            Type::KERNEL
        }
    }

    impl Type {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Type>("InstallProcedure.Type")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:chromeos_update_engine.DeltaArchiveManifest)
pub struct DeltaArchiveManifest {
    // message fields
    ///  The update procedure for the main partition (USR-A or USR-B). Once
    ///  complete it should match the hash specified in new_partition_info.
    // @@protoc_insertion_point(field:chromeos_update_engine.DeltaArchiveManifest.partition_operations)
    pub partition_operations: ::std::vec::Vec<InstallOperation>,
    // @@protoc_insertion_point(field:chromeos_update_engine.DeltaArchiveManifest.noop_operations)
    pub noop_operations: ::std::vec::Vec<InstallOperation>,
    ///  (At time of writing) usually 4096
    // @@protoc_insertion_point(field:chromeos_update_engine.DeltaArchiveManifest.block_size)
    pub block_size: ::std::option::Option<u32>,
    ///  If signatures are present, the offset into the blobs, generally
    ///  tacked onto the end of the file, and the length. We use an offset
    ///  rather than a bool to allow for more flexibility in future file formats.
    ///  If either is absent, it means signatures aren't supported in this
    ///  file.
    // @@protoc_insertion_point(field:chromeos_update_engine.DeltaArchiveManifest.signatures_offset)
    pub signatures_offset: ::std::option::Option<u64>,
    // @@protoc_insertion_point(field:chromeos_update_engine.DeltaArchiveManifest.signatures_size)
    pub signatures_size: ::std::option::Option<u64>,
    ///  Partition data that can be used to validate the update.
    // @@protoc_insertion_point(field:chromeos_update_engine.DeltaArchiveManifest.old_partition_info)
    pub old_partition_info: ::protobuf::MessageField<InstallInfo>,
    // @@protoc_insertion_point(field:chromeos_update_engine.DeltaArchiveManifest.new_partition_info)
    pub new_partition_info: ::protobuf::MessageField<InstallInfo>,
    ///  In addition to the partition update, process updates for additional
    ///  files, such as kernels. Versions of update_engine that can interpret
    ///  this list *MUST* ignore noop_operations and properly account for the
    ///  signature data at the end of the payload.
    // @@protoc_insertion_point(field:chromeos_update_engine.DeltaArchiveManifest.procedures)
    pub procedures: ::std::vec::Vec<InstallProcedure>,
    // special fields
    // @@protoc_insertion_point(special_field:chromeos_update_engine.DeltaArchiveManifest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeltaArchiveManifest {
    fn default() -> &'a DeltaArchiveManifest {
        <DeltaArchiveManifest as ::protobuf::Message>::default_instance()
    }
}

impl DeltaArchiveManifest {
    pub fn new() -> DeltaArchiveManifest {
        ::std::default::Default::default()
    }

    // optional uint32 block_size = 3;

    pub fn block_size(&self) -> u32 {
        self.block_size.unwrap_or(4096u32)
    }

    pub fn clear_block_size(&mut self) {
        self.block_size = ::std::option::Option::None;
    }

    pub fn has_block_size(&self) -> bool {
        self.block_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block_size(&mut self, v: u32) {
        self.block_size = ::std::option::Option::Some(v);
    }

    // optional uint64 signatures_offset = 4;

    pub fn signatures_offset(&self) -> u64 {
        self.signatures_offset.unwrap_or(0)
    }

    pub fn clear_signatures_offset(&mut self) {
        self.signatures_offset = ::std::option::Option::None;
    }

    pub fn has_signatures_offset(&self) -> bool {
        self.signatures_offset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signatures_offset(&mut self, v: u64) {
        self.signatures_offset = ::std::option::Option::Some(v);
    }

    // optional uint64 signatures_size = 5;

    pub fn signatures_size(&self) -> u64 {
        self.signatures_size.unwrap_or(0)
    }

    pub fn clear_signatures_size(&mut self) {
        self.signatures_size = ::std::option::Option::None;
    }

    pub fn has_signatures_size(&self) -> bool {
        self.signatures_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signatures_size(&mut self, v: u64) {
        self.signatures_size = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "partition_operations",
            |m: &DeltaArchiveManifest| { &m.partition_operations },
            |m: &mut DeltaArchiveManifest| { &mut m.partition_operations },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "noop_operations",
            |m: &DeltaArchiveManifest| { &m.noop_operations },
            |m: &mut DeltaArchiveManifest| { &mut m.noop_operations },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "block_size",
            |m: &DeltaArchiveManifest| { &m.block_size },
            |m: &mut DeltaArchiveManifest| { &mut m.block_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signatures_offset",
            |m: &DeltaArchiveManifest| { &m.signatures_offset },
            |m: &mut DeltaArchiveManifest| { &mut m.signatures_offset },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signatures_size",
            |m: &DeltaArchiveManifest| { &m.signatures_size },
            |m: &mut DeltaArchiveManifest| { &mut m.signatures_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, InstallInfo>(
            "old_partition_info",
            |m: &DeltaArchiveManifest| { &m.old_partition_info },
            |m: &mut DeltaArchiveManifest| { &mut m.old_partition_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, InstallInfo>(
            "new_partition_info",
            |m: &DeltaArchiveManifest| { &m.new_partition_info },
            |m: &mut DeltaArchiveManifest| { &mut m.new_partition_info },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "procedures",
            |m: &DeltaArchiveManifest| { &m.procedures },
            |m: &mut DeltaArchiveManifest| { &mut m.procedures },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeltaArchiveManifest>(
            "DeltaArchiveManifest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeltaArchiveManifest {
    const NAME: &'static str = "DeltaArchiveManifest";

    fn is_initialized(&self) -> bool {
        for v in &self.partition_operations {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.noop_operations {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.old_partition_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.new_partition_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.procedures {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.partition_operations.push(is.read_message()?);
                },
                18 => {
                    self.noop_operations.push(is.read_message()?);
                },
                24 => {
                    self.block_size = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.signatures_offset = ::std::option::Option::Some(is.read_uint64()?);
                },
                40 => {
                    self.signatures_size = ::std::option::Option::Some(is.read_uint64()?);
                },
                66 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.old_partition_info)?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.new_partition_info)?;
                },
                82 => {
                    self.procedures.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.partition_operations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        for value in &self.noop_operations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if let Some(v) = self.block_size {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.signatures_offset {
            my_size += ::protobuf::rt::uint64_size(4, v);
        }
        if let Some(v) = self.signatures_size {
            my_size += ::protobuf::rt::uint64_size(5, v);
        }
        if let Some(v) = self.old_partition_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.new_partition_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.procedures {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.partition_operations {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        for v in &self.noop_operations {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        if let Some(v) = self.block_size {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.signatures_offset {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.signatures_size {
            os.write_uint64(5, v)?;
        }
        if let Some(v) = self.old_partition_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
        }
        if let Some(v) = self.new_partition_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        for v in &self.procedures {
            ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeltaArchiveManifest {
        DeltaArchiveManifest::new()
    }

    fn clear(&mut self) {
        self.partition_operations.clear();
        self.noop_operations.clear();
        self.block_size = ::std::option::Option::None;
        self.signatures_offset = ::std::option::Option::None;
        self.signatures_size = ::std::option::Option::None;
        self.old_partition_info.clear();
        self.new_partition_info.clear();
        self.procedures.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeltaArchiveManifest {
        static instance: DeltaArchiveManifest = DeltaArchiveManifest {
            partition_operations: ::std::vec::Vec::new(),
            noop_operations: ::std::vec::Vec::new(),
            block_size: ::std::option::Option::None,
            signatures_offset: ::std::option::Option::None,
            signatures_size: ::std::option::Option::None,
            old_partition_info: ::protobuf::MessageField::none(),
            new_partition_info: ::protobuf::MessageField::none(),
            procedures: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeltaArchiveManifest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeltaArchiveManifest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeltaArchiveManifest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeltaArchiveManifest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15update_metadata.proto\x12\x16chromeos_update_engine\"\xbc\x03\n\
    \x10InstallOperation\x12A\n\x04type\x18\x01\x20\x02(\x0e2-.chromeos_upda\
    te_engine.InstallOperation.TypeR\x04type\x12\x1f\n\x0bdata_offset\x18\
    \x02\x20\x01(\rR\ndataOffset\x12\x1f\n\x0bdata_length\x18\x03\x20\x01(\r\
    R\ndataLength\x12?\n\x0bsrc_extents\x18\x04\x20\x03(\x0b2\x1e.chromeos_u\
    pdate_engine.ExtentR\nsrcExtents\x12\x1d\n\nsrc_length\x18\x05\x20\x01(\
    \x04R\tsrcLength\x12?\n\x0bdst_extents\x18\x06\x20\x03(\x0b2\x1e.chromeo\
    s_update_engine.ExtentR\ndstExtents\x12\x1d\n\ndst_length\x18\x07\x20\
    \x01(\x04R\tdstLength\x12(\n\x10data_sha256_hash\x18\x08\x20\x01(\x0cR\
    \x0edataSha256Hash\"9\n\x04Type\x12\x0b\n\x07REPLACE\x10\0\x12\x0e\n\nRE\
    PLACE_BZ\x10\x01\x12\x08\n\x04MOVE\x10\x02\x12\n\n\x06BSDIFF\x10\x03\"H\
    \n\x06Extent\x12\x1f\n\x0bstart_block\x18\x01\x20\x01(\x04R\nstartBlock\
    \x12\x1d\n\nnum_blocks\x18\x02\x20\x01(\x04R\tnumBlocks\"\x95\x01\n\nSig\
    natures\x12L\n\nsignatures\x18\x01\x20\x03(\x0b2,.chromeos_update_engine\
    .Signatures.SignatureR\nsignatures\x1a9\n\tSignature\x12\x18\n\x07versio\
    n\x18\x01\x20\x01(\rR\x07version\x12\x12\n\x04data\x18\x02\x20\x01(\x0cR\
    \x04data\"5\n\x0bInstallInfo\x12\x12\n\x04size\x18\x01\x20\x01(\x04R\x04\
    size\x12\x12\n\x04hash\x18\x02\x20\x01(\x0cR\x04hash\"\xc3\x02\n\x10Inst\
    allProcedure\x12A\n\x04type\x18\x01\x20\x01(\x0e2-.chromeos_update_engin\
    e.InstallProcedure.TypeR\x04type\x12H\n\noperations\x18\x02\x20\x03(\x0b\
    2(.chromeos_update_engine.InstallOperationR\noperations\x12>\n\x08old_in\
    fo\x18\x03\x20\x01(\x0b2#.chromeos_update_engine.InstallInfoR\x07oldInfo\
    \x12>\n\x08new_info\x18\x04\x20\x01(\x0b2#.chromeos_update_engine.Instal\
    lInfoR\x07newInfo\"\"\n\x04Type\x12\n\n\x06KERNEL\x10\0\x12\x0e\n\nPCR_P\
    OLICY\x10\x01\"\xb1\x04\n\x14DeltaArchiveManifest\x12[\n\x14partition_op\
    erations\x18\x01\x20\x03(\x0b2(.chromeos_update_engine.InstallOperationR\
    \x13partitionOperations\x12Q\n\x0fnoop_operations\x18\x02\x20\x03(\x0b2(\
    .chromeos_update_engine.InstallOperationR\x0enoopOperations\x12#\n\nbloc\
    k_size\x18\x03\x20\x01(\r:\x044096R\tblockSize\x12+\n\x11signatures_offs\
    et\x18\x04\x20\x01(\x04R\x10signaturesOffset\x12'\n\x0fsignatures_size\
    \x18\x05\x20\x01(\x04R\x0esignaturesSize\x12Q\n\x12old_partition_info\
    \x18\x08\x20\x01(\x0b2#.chromeos_update_engine.InstallInfoR\x10oldPartit\
    ionInfo\x12Q\n\x12new_partition_info\x18\t\x20\x01(\x0b2#.chromeos_updat\
    e_engine.InstallInfoR\x10newPartitionInfo\x12H\n\nprocedures\x18\n\x20\
    \x03(\x0b2(.chromeos_update_engine.InstallProcedureR\nproceduresJ\xc1H\n\
    \x07\x12\x05\x04\0\xc1\x01\x01\n\xb1\x01\n\x01\x02\x12\x03\x04\0\x1f2\
    \xa6\x01\x20Copyright\x20(c)\x202010\x20The\x20Chromium\x20OS\x20Authors\
    .\x20All\x20rights\x20reserved.\n\x20Use\x20of\x20this\x20source\x20code\
    \x20is\x20governed\x20by\x20a\x20BSD-style\x20license\x20that\x20can\x20\
    be\n\x20found\x20in\x20the\x20LICENSE\x20file.\n\n\xbb\x0e\n\x02\x04\0\
    \x12\x040\0Q\x01\x1a\x82\x06\x20The\x20client\x20will\x20perform\x20each\
    \x20InstallOperation\x20in\x20order,\x20beginning\x20even\n\x20before\
    \x20the\x20entire\x20delta\x20file\x20is\x20downloaded\x20(but\x20after\
    \x20at\x20least\x20the\n\x20protobuf\x20is\x20downloaded).\x20The\x20typ\
    es\x20of\x20operations\x20are\x20explained:\n\x20-\x20REPLACE:\x20Replac\
    e\x20the\x20dst_extents\x20on\x20the\x20drive\x20with\x20the\x20attached\
    \x20data,\n\x20\x20\x20zero\x20padding\x20out\x20to\x20block\x20size.\n\
    \x20-\x20REPLACE_BZ:\x20bzip2-uncompress\x20the\x20attached\x20data\x20a\
    nd\x20write\x20it\x20into\n\x20\x20\x20dst_extents\x20on\x20the\x20drive\
    ,\x20zero\x20padding\x20to\x20block\x20size.\n\x20-\x20MOVE:\x20Copy\x20\
    the\x20data\x20in\x20src_extents\x20to\x20dst_extents.\x20Extents\x20may\
    \x20overlap,\n\x20\x20\x20so\x20it\x20may\x20be\x20desirable\x20to\x20re\
    ad\x20all\x20src_extents\x20data\x20into\x20memory\x20before\n\x20\x20\
    \x20writing\x20it\x20out.\n\x20-\x20BSDIFF:\x20Read\x20src_length\x20byt\
    es\x20from\x20src_extents\x20into\x20memory,\x20perform\n\x20\x20\x20bsp\
    atch\x20with\x20attached\x20data,\x20write\x20new\x20data\x20to\x20dst_e\
    xtents,\x20zero\x20padding\n\x20\x20\x20to\x20block\x20size.\n2\xfc\x05\
    \x20Update\x20file\x20format:\x20A\x20delta\x20update\x20file\x20contain\
    s\x20all\x20the\x20deltas\x20needed\n\x20to\x20update\x20a\x20system\x20\
    from\x20one\x20specific\x20version\x20to\x20another\x20specific\n\x20ver\
    sion.\x20The\x20update\x20format\x20is\x20represented\x20by\x20this\x20s\
    truct\x20pseudocode:\n\x20struct\x20delta_update_file\x20{\n\x20\x20\x20\
    char\x20magic[4]\x20=\x20\"CrAU\";\n\x20\x20\x20uint64\x20file_format_ve\
    rsion\x20=\x201;\n\x20\x20\x20uint64\x20manifest_size;\x20\x20//\x20Size\
    \x20of\x20protobuf\x20DeltaArchiveManifest\n\x20\x20\x20//\x20The\x20Bzi\
    p2\x20compressed\x20DeltaArchiveManifest\n\x20\x20\x20char\x20manifest[]\
    ;\n\n\x20\x20\x20//\x20Data\x20blobs\x20for\x20files,\x20no\x20specific\
    \x20format.\x20The\x20specific\x20offset\n\x20\x20\x20//\x20and\x20lengt\
    h\x20of\x20each\x20data\x20blob\x20is\x20recorded\x20in\x20the\x20DeltaA\
    rchiveManifest.\n\x20\x20\x20struct\x20{\n\x20\x20\x20\x20\x20char\x20da\
    ta[];\n\x20\x20\x20}\x20blobs[];\n\n\x20\x20\x20//\x20The\x20signature\
    \x20covers\x20all\x20preceding\x20data.\x20Size\x20and\x20location\x20ar\
    e\n\x20\x20\x20//\x20specified\x20inside\x20the\x20manifest.\n\x20\x20\
    \x20char\x20signatures_message[];\n\n\x20};\n2\xcf\x01\x20The\x20DeltaAr\
    chiveManifest\x20protobuf\x20is\x20an\x20ordered\x20list\x20of\x20Instal\
    lOperation\n\x20objects.\x20These\x20objects\x20are\x20stored\x20in\x20a\
    \x20linear\x20array\x20in\x20the\n\x20DeltaArchiveManifest.\x20Each\x20o\
    peration\x20is\x20applied\x20in\x20order\x20by\x20the\x20client.\n2Y\x20\
    The\x20DeltaArchiveManifest\x20also\x20contains\x20the\x20initial\x20and\
    \x20final\n\x20checksums\x20for\x20the\x20device.\n\n\n\n\x03\x04\0\x01\
    \x12\x030\x08\x18\n\x0c\n\x04\x04\0\x04\0\x12\x041\x026\x03\n\x0c\n\x05\
    \x04\0\x04\0\x01\x12\x031\x07\x0b\n=\n\x06\x04\0\x04\0\x02\0\x12\x032\
    \x04\x10\".\x20Replace\x20destination\x20extents\x20w/\x20attached\x20da\
    ta\n\n\x0e\n\x07\x04\0\x04\0\x02\0\x01\x12\x032\x04\x0b\n\x0e\n\x07\x04\
    \0\x04\0\x02\0\x02\x12\x032\x0e\x0f\nE\n\x06\x04\0\x04\0\x02\x01\x12\x03\
    3\x04\x13\"6\x20Replace\x20destination\x20extents\x20w/\x20attached\x20b\
    zipped\x20data\n\n\x0e\n\x07\x04\0\x04\0\x02\x01\x01\x12\x033\x04\x0e\n\
    \x0e\n\x07\x04\0\x04\0\x02\x01\x02\x12\x033\x11\x12\n;\n\x06\x04\0\x04\0\
    \x02\x02\x12\x034\x04\r\",\x20Move\x20source\x20extents\x20to\x20destina\
    tion\x20extents\n\n\x0e\n\x07\x04\0\x04\0\x02\x02\x01\x12\x034\x04\x08\n\
    \x0e\n\x07\x04\0\x04\0\x02\x02\x02\x12\x034\x0b\x0c\n1\n\x06\x04\0\x04\0\
    \x02\x03\x12\x035\x04\x0f\"\"\x20The\x20data\x20is\x20a\x20bsdiff\x20bin\
    ary\x20diff\n\n\x0e\n\x07\x04\0\x04\0\x02\x03\x01\x12\x035\x04\n\n\x0e\n\
    \x07\x04\0\x04\0\x02\x03\x02\x12\x035\r\x0e\n\x0b\n\x04\x04\0\x02\0\x12\
    \x037\x02\x19\n\x0c\n\x05\x04\0\x02\0\x04\x12\x037\x02\n\n\x0c\n\x05\x04\
    \0\x02\0\x06\x12\x037\x0b\x0f\n\x0c\n\x05\x04\0\x02\0\x01\x12\x037\x10\
    \x14\n\x0c\n\x05\x04\0\x02\0\x03\x12\x037\x17\x18\ne\n\x04\x04\0\x02\x01\
    \x12\x03:\x02\"\x1aX\x20The\x20offset\x20into\x20the\x20delta\x20file\
    \x20(after\x20the\x20protobuf)\n\x20where\x20the\x20data\x20(if\x20any)\
    \x20is\x20stored\n\n\x0c\n\x05\x04\0\x02\x01\x04\x12\x03:\x02\n\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03:\x0b\x11\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03:\x12\x1d\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03:\x20!\n7\n\x04\
    \x04\0\x02\x02\x12\x03<\x02\"\x1a*\x20The\x20length\x20of\x20the\x20data\
    \x20in\x20the\x20delta\x20file\n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\x03<\
    \x02\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03<\x0b\x11\n\x0c\n\x05\x04\0\
    \x02\x02\x01\x12\x03<\x12\x1d\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03<\x20\
    !\nR\n\x04\x04\0\x02\x03\x12\x03?\x02\"\x1aE\x20Ordered\x20list\x20of\
    \x20extents\x20that\x20are\x20read\x20from\x20(if\x20any)\x20and\x20writ\
    ten\x20to.\n\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03?\x02\n\n\x0c\n\x05\
    \x04\0\x02\x03\x06\x12\x03?\x0b\x11\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03?\x12\x1d\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03?\x20!\n\xc5\x01\n\
    \x04\x04\0\x02\x04\x12\x03C\x02!\x1a\xb7\x01\x20Byte\x20length\x20of\x20\
    src,\x20not\x20necessarily\x20block\x20aligned.\x20It's\x20only\x20used\
    \x20for\n\x20BSDIFF,\x20because\x20we\x20need\x20to\x20pass\x20that\x20e\
    xternal\x20program\x20the\x20number\n\x20of\x20bytes\x20to\x20read\x20fr\
    om\x20the\x20blocks\x20we\x20pass\x20it.\n\n\x0c\n\x05\x04\0\x02\x04\x04\
    \x12\x03C\x02\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03C\x0b\x11\n\x0c\n\
    \x05\x04\0\x02\x04\x01\x12\x03C\x12\x1c\n\x0c\n\x05\x04\0\x02\x04\x03\
    \x12\x03C\x1f\x20\n\x0b\n\x04\x04\0\x02\x05\x12\x03E\x02\"\n\x0c\n\x05\
    \x04\0\x02\x05\x04\x12\x03E\x02\n\n\x0c\n\x05\x04\0\x02\x05\x06\x12\x03E\
    \x0b\x11\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03E\x12\x1d\n\x0c\n\x05\x04\
    \0\x02\x05\x03\x12\x03E\x20!\n\xb9\x01\n\x04\x04\0\x02\x06\x12\x03I\x02!\
    \x1a\xab\x01\x20byte\x20length\x20of\x20dst,\x20not\x20necessarily\x20bl\
    ock\x20aligned.\x20It's\x20only\x20used\x20for\n\x20BSDIFF,\x20because\
    \x20we\x20need\x20to\x20fill\x20in\x20the\x20rest\x20of\x20the\x20last\
    \x20block\n\x20that\x20bsdiff\x20writes\x20with\x20'\\0'\x20bytes.\n\n\
    \x0c\n\x05\x04\0\x02\x06\x04\x12\x03I\x02\n\n\x0c\n\x05\x04\0\x02\x06\
    \x05\x12\x03I\x0b\x11\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03I\x12\x1c\n\
    \x0c\n\x05\x04\0\x02\x06\x03\x12\x03I\x1f\x20\n\xa0\x02\n\x04\x04\0\x02\
    \x07\x12\x03P\x02&\x1a\x92\x02\x20Required\x20SHA\x20256\x20hash\x20of\
    \x20the\x20blob\x20associated\x20with\x20this\x20operation.\n\x20This\
    \x20is\x20used\x20as\x20a\x20primary\x20validation\x20for\x20http-based\
    \x20downloads\x20and\n\x20as\x20a\x20defense-in-depth\x20validation\x20f\
    or\x20https-based\x20downloads.\x20If\n\x20the\x20operation\x20doesn't\
    \x20refer\x20to\x20any\x20blob,\x20this\x20field\x20will\x20have\n\x20ze\
    ro\x20bytes.\n\n\x0c\n\x05\x04\0\x02\x07\x04\x12\x03P\x02\n\n\x0c\n\x05\
    \x04\0\x02\x07\x05\x12\x03P\x0b\x10\n\x0c\n\x05\x04\0\x02\x07\x01\x12\
    \x03P\x11!\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03P$%\n\x8f\x06\n\x02\x04\
    \x01\x12\x04_\0b\x01\x1a\x82\x06\x20Data\x20is\x20packed\x20into\x20bloc\
    ks\x20on\x20disk,\x20always\x20starting\x20from\x20the\x20beginning\n\
    \x20of\x20the\x20block.\x20If\x20a\x20file's\x20data\x20is\x20too\x20lar\
    ge\x20for\x20one\x20block,\x20it\x20overflows\n\x20into\x20another\x20bl\
    ock,\x20which\x20may\x20or\x20may\x20not\x20be\x20the\x20following\x20bl\
    ock\x20on\x20the\n\x20physical\x20partition.\x20An\x20ordered\x20list\
    \x20of\x20extents\x20is\x20another\n\x20representation\x20of\x20an\x20or\
    dered\x20list\x20of\x20blocks.\x20For\x20example,\x20a\x20file\x20stored\
    \n\x20in\x20blocks\x209,\x2010,\x2011,\x202,\x2018,\x2012\x20(in\x20that\
    \x20order)\x20would\x20be\x20stored\x20in\n\x20extents\x20{\x20{9,\x203}\
    ,\x20{2,\x201},\x20{18,\x201},\x20{12,\x201}\x20}\x20(in\x20that\x20orde\
    r).\n\x20In\x20general,\x20files\x20are\x20stored\x20sequentially\x20on\
    \x20disk,\x20so\x20it's\x20more\x20efficient\n\x20to\x20use\x20extents\
    \x20to\x20encode\x20the\x20block\x20lists\x20(this\x20is\x20effectively\
    \n\x20run-length\x20encoding).\n\x20A\x20sentinel\x20value\x20(UINT64_MA\
    X)\x20as\x20the\x20start\x20block\x20denotes\x20a\x20sparse-hole\n\x20in\
    \x20a\x20file\x20whose\x20block-length\x20is\x20specified\x20by\x20num_b\
    locks.\n\n\n\n\x03\x04\x01\x01\x12\x03_\x08\x0e\n\x0b\n\x04\x04\x01\x02\
    \0\x12\x03`\x02\"\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03`\x02\n\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03`\x0b\x11\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03`\x12\x1d\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03`\x20!\n\x0b\n\
    \x04\x04\x01\x02\x01\x12\x03a\x02!\n\x0c\n\x05\x04\x01\x02\x01\x04\x12\
    \x03a\x02\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03a\x0b\x11\n\x0c\n\x05\
    \x04\x01\x02\x01\x01\x12\x03a\x12\x1c\n\x0c\n\x05\x04\x01\x02\x01\x03\
    \x12\x03a\x1f\x20\n\xe8\x05\n\x02\x04\x02\x12\x04o\0u\x01\x1a\xdb\x05\
    \x20Signatures:\x20Updates\x20may\x20be\x20signed\x20by\x20the\x20OS\x20\
    vendor.\x20The\x20client\x20verifies\n\x20an\x20update's\x20signature\
    \x20by\x20hashing\x20the\x20entire\x20download.\x20The\x20section\x20of\
    \x20the\n\x20download\x20that\x20contains\x20the\x20signature\x20is\x20a\
    t\x20the\x20end\x20of\x20the\x20file,\x20so\x20when\n\x20signing\x20a\
    \x20file,\x20only\x20the\x20part\x20up\x20to\x20the\x20signature\x20part\
    \x20is\x20signed.\n\x20Then,\x20the\x20client\x20looks\x20inside\x20the\
    \x20download's\x20Signatures\x20message\x20for\x20a\n\x20Signature\x20me\
    ssage\x20that\x20it\x20knows\x20how\x20to\x20handle.\x20Generally,\x20a\
    \x20client\x20will\n\x20only\x20know\x20how\x20to\x20handle\x20one\x20ty\
    pe\x20of\x20signature,\x20but\x20an\x20update\x20may\x20contain\n\x20man\
    y\x20signatures\x20to\x20support\x20many\x20different\x20types\x20of\x20\
    client.\x20Then\x20client\n\x20selects\x20a\x20Signature\x20message\x20a\
    nd\x20uses\x20that,\x20along\x20with\x20a\x20known\x20public\x20key,\n\
    \x20to\x20verify\x20the\x20download.\x20The\x20public\x20key\x20is\x20ex\
    pected\x20to\x20be\x20part\x20of\x20the\n\x20client.\n\n\n\n\x03\x04\x02\
    \x01\x12\x03o\x08\x12\n\x0c\n\x04\x04\x02\x03\0\x12\x04p\x02s\x03\n\x0c\
    \n\x05\x04\x02\x03\0\x01\x12\x03p\n\x13\n\r\n\x06\x04\x02\x03\0\x02\0\
    \x12\x03q\x04\x20\n\x0e\n\x07\x04\x02\x03\0\x02\0\x04\x12\x03q\x04\x0c\n\
    \x0e\n\x07\x04\x02\x03\0\x02\0\x05\x12\x03q\r\x13\n\x0e\n\x07\x04\x02\
    \x03\0\x02\0\x01\x12\x03q\x14\x1b\n\x0e\n\x07\x04\x02\x03\0\x02\0\x03\
    \x12\x03q\x1e\x1f\n\r\n\x06\x04\x02\x03\0\x02\x01\x12\x03r\x04\x1c\n\x0e\
    \n\x07\x04\x02\x03\0\x02\x01\x04\x12\x03r\x04\x0c\n\x0e\n\x07\x04\x02\
    \x03\0\x02\x01\x05\x12\x03r\r\x12\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x01\
    \x12\x03r\x13\x17\n\x0e\n\x07\x04\x02\x03\0\x02\x01\x03\x12\x03r\x1a\x1b\
    \n\x0b\n\x04\x04\x02\x02\0\x12\x03t\x02$\n\x0c\n\x05\x04\x02\x02\0\x04\
    \x12\x03t\x02\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03t\x0b\x14\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03t\x15\x1f\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03t\"#\n\x86\x01\n\x02\x04\x03\x12\x04z\0}\x012z\x20Info\x20is\x20\
    used\x20to\x20validate\x20the\x20source\x20prior\x20to\x20the\x20update\
    \x20or\n\x20the\x20destination\x20after\x20the\x20list\x20of\x20InstallO\
    perations\x20has\x20run.\n\n\n\n\x03\x04\x03\x01\x12\x03z\x08\x13\n\x0b\
    \n\x04\x04\x03\x02\0\x12\x03{\x02\x1b\n\x0c\n\x05\x04\x03\x02\0\x04\x12\
    \x03{\x02\n\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03{\x0b\x11\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03{\x12\x16\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03{\x19\x1a\n\x0b\n\x04\x04\x03\x02\x01\x12\x03|\x02\x1a\n\x0c\n\x05\
    \x04\x03\x02\x01\x04\x12\x03|\x02\n\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\
    \x03|\x0b\x10\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03|\x11\x15\n\x0c\n\
    \x05\x04\x03\x02\x01\x03\x12\x03|\x18\x19\n\x95\x01\n\x02\x04\x04\x12\
    \x06\x81\x01\0\x8c\x01\x01\x1a\x86\x01\x20InstallProcedure\x20defines\
    \x20the\x20update\x20procedure\x20for\x20a\x20single\x20file\x20or\x20bl\
    ock\n\x20device\x20(except\x20for\x20/usr\x20which\x20is\x20in\x20DeltaA\
    rchiveManifest).\n\n\x0b\n\x03\x04\x04\x01\x12\x04\x81\x01\x08\x18\n\x0e\
    \n\x04\x04\x04\x04\0\x12\x06\x82\x01\x02\x85\x01\x03\n\r\n\x05\x04\x04\
    \x04\0\x01\x12\x04\x82\x01\x07\x0b\nB\n\x06\x04\x04\x04\0\x02\0\x12\x04\
    \x83\x01\x04\x0f\"2\x20A\x20kernel\x20image\x20to\x20install\x20to\x20th\
    e\x20boot\x20partition.\n\n\x0f\n\x07\x04\x04\x04\0\x02\0\x01\x12\x04\
    \x83\x01\x04\n\n\x0f\n\x07\x04\x04\x04\0\x02\0\x02\x12\x04\x83\x01\r\x0e\
    \n5\n\x06\x04\x04\x04\0\x02\x01\x12\x04\x84\x01\x04\x13\"%\x20A\x20zip\
    \x20file\x20containing\x20TPM\x20PCR\x20data.\n\n\x0f\n\x07\x04\x04\x04\
    \0\x02\x01\x01\x12\x04\x84\x01\x04\x0e\n\x0f\n\x07\x04\x04\x04\0\x02\x01\
    \x02\x12\x04\x84\x01\x11\x12\n\x0c\n\x04\x04\x04\x02\0\x12\x04\x86\x01\
    \x02\x19\n\r\n\x05\x04\x04\x02\0\x04\x12\x04\x86\x01\x02\n\n\r\n\x05\x04\
    \x04\x02\0\x06\x12\x04\x86\x01\x0b\x0f\n\r\n\x05\x04\x04\x02\0\x01\x12\
    \x04\x86\x01\x10\x14\n\r\n\x05\x04\x04\x02\0\x03\x12\x04\x86\x01\x17\x18\
    \n\x0c\n\x04\x04\x04\x02\x01\x12\x04\x88\x01\x02+\n\r\n\x05\x04\x04\x02\
    \x01\x04\x12\x04\x88\x01\x02\n\n\r\n\x05\x04\x04\x02\x01\x06\x12\x04\x88\
    \x01\x0b\x1b\n\r\n\x05\x04\x04\x02\x01\x01\x12\x04\x88\x01\x1c&\n\r\n\
    \x05\x04\x04\x02\x01\x03\x12\x04\x88\x01)*\n\x0c\n\x04\x04\x04\x02\x02\
    \x12\x04\x8a\x01\x02$\n\r\n\x05\x04\x04\x02\x02\x04\x12\x04\x8a\x01\x02\
    \n\n\r\n\x05\x04\x04\x02\x02\x06\x12\x04\x8a\x01\x0b\x16\n\r\n\x05\x04\
    \x04\x02\x02\x01\x12\x04\x8a\x01\x17\x1f\n\r\n\x05\x04\x04\x02\x02\x03\
    \x12\x04\x8a\x01\"#\n\x0c\n\x04\x04\x04\x02\x03\x12\x04\x8b\x01\x02$\n\r\
    \n\x05\x04\x04\x02\x03\x04\x12\x04\x8b\x01\x02\n\n\r\n\x05\x04\x04\x02\
    \x03\x06\x12\x04\x8b\x01\x0b\x16\n\r\n\x05\x04\x04\x02\x03\x01\x12\x04\
    \x8b\x01\x17\x1f\n\r\n\x05\x04\x04\x02\x03\x03\x12\x04\x8b\x01\"#\n\x0c\
    \n\x02\x04\x05\x12\x06\x8e\x01\0\xc1\x01\x01\n\x0b\n\x03\x04\x05\x01\x12\
    \x04\x8e\x01\x08\x1c\n\x97\x01\n\x04\x04\x05\x02\0\x12\x04\x91\x01\x025\
    \x1a\x88\x01\x20The\x20update\x20procedure\x20for\x20the\x20main\x20part\
    ition\x20(USR-A\x20or\x20USR-B).\x20Once\n\x20complete\x20it\x20should\
    \x20match\x20the\x20hash\x20specified\x20in\x20new_partition_info.\n\n\r\
    \n\x05\x04\x05\x02\0\x04\x12\x04\x91\x01\x02\n\n\r\n\x05\x04\x05\x02\0\
    \x06\x12\x04\x91\x01\x0b\x1b\n\r\n\x05\x04\x05\x02\0\x01\x12\x04\x91\x01\
    \x1c0\n\r\n\x05\x04\x05\x02\0\x03\x12\x04\x91\x0134\n\x9c\x08\n\x04\x04\
    \x05\x02\x01\x12\x04\xa9\x01\x020\x1a\x8d\x08\x20This\x20field\x20is\x20\
    maintained\x20for\x20compatibility\x20with\x20older\x20update_engine\n\
    \x20clients.\x20In\x20the\x20ChromeOS\x20days\x20it\x20covered\x20the\
    \x20kernel\x20partition\x20but\x20in\n\x20CoreOS\x20it\x20has\x20only\
    \x20been\x20used\x20to\x20insert\x20a\x20dummy\x20operation\x20to\x20acc\
    ount\x20for\n\x20the\x20signatures\x20tacked\x20onto\x20the\x20end\x20of\
    \x20the\x20payload.\x20The\x20code\x20was\x20not\x20smart\n\x20enough\
    \x20to\x20stop\x20passing\x20data\x20to\x20the\x20filesystem\x20writer\
    \x20code\x20after\x20the\n\x20signatures_offset\x20had\x20been\x20reache\
    d,\x20instead\x20using\x20the\x20magic\x20punch-hole\n\x20value\x20to\
    \x20skip\x20over\x20the\x20extra\x20data.\x20Since\x20CoreOS\x20versions\
    \x20of\x20update_engine\n\x20only\x20partially\x20removed\x20support\x20\
    kernel\x20partitions\x20passing\x20anything\x20other\n\x20than\x20dummy\
    \x20operations\x20will\x20trigger\x20broken\x20code\x20paths\x20but\x20o\
    mitting\x20the\n\x20dummy\x20operations\x20will\x20fail\x20when\x20the\
    \x20filesystem\x20writer\x20receives\x20unexpected\n\x20data.\x20Therefo\
    re\x20to\x20work\x20with\x20old\x20versions\x20it\x20strictly\x20*must*\
    \x20look\x20like:\n\n\x20\x20\x20noop_operations:\x20{\n\x20\x20\x20\x20\
    \x20type:\x20REPLACE\n\x20\x20\x20\x20\x20data_offset:\x20signatures_off\
    set\n\x20\x20\x20\x20\x20data_length:\x20signatures_size\n\x20\x20\x20\
    \x20\x20dst_extents:\x20{\n\x20\x20\x20\x20\x20\x20\x20start_block:\x20U\
    INT64_MAX\n\x20\x20\x20\x20\x20\x20\x20num_blocks:\x20(signature_size\
    \x20+\x20block_size\x20-\x201)\x20/\x20block_size\n\x20\x20\x20\x20\x20}\
    \n\x20\x20\x20}\n\n\n\r\n\x05\x04\x05\x02\x01\x04\x12\x04\xa9\x01\x02\n\
    \n\r\n\x05\x04\x05\x02\x01\x06\x12\x04\xa9\x01\x0b\x1b\n\r\n\x05\x04\x05\
    \x02\x01\x01\x12\x04\xa9\x01\x1c+\n\r\n\x05\x04\x05\x02\x01\x03\x12\x04\
    \xa9\x01./\n1\n\x04\x04\x05\x02\x02\x12\x04\xac\x01\x022\x1a#\x20(At\x20\
    time\x20of\x20writing)\x20usually\x204096\n\n\r\n\x05\x04\x05\x02\x02\
    \x04\x12\x04\xac\x01\x02\n\n\r\n\x05\x04\x05\x02\x02\x05\x12\x04\xac\x01\
    \x0b\x11\n\r\n\x05\x04\x05\x02\x02\x01\x12\x04\xac\x01\x12\x1c\n\r\n\x05\
    \x04\x05\x02\x02\x03\x12\x04\xac\x01\x1f\x20\n\r\n\x05\x04\x05\x02\x02\
    \x08\x12\x04\xac\x01!1\n\r\n\x05\x04\x05\x02\x02\x07\x12\x04\xac\x01,0\n\
    \xa7\x02\n\x04\x04\x05\x02\x03\x12\x04\xb3\x01\x02(\x1a\x98\x02\x20If\
    \x20signatures\x20are\x20present,\x20the\x20offset\x20into\x20the\x20blo\
    bs,\x20generally\n\x20tacked\x20onto\x20the\x20end\x20of\x20the\x20file,\
    \x20and\x20the\x20length.\x20We\x20use\x20an\x20offset\n\x20rather\x20th\
    an\x20a\x20bool\x20to\x20allow\x20for\x20more\x20flexibility\x20in\x20fu\
    ture\x20file\x20formats.\n\x20If\x20either\x20is\x20absent,\x20it\x20mea\
    ns\x20signatures\x20aren't\x20supported\x20in\x20this\n\x20file.\n\n\r\n\
    \x05\x04\x05\x02\x03\x04\x12\x04\xb3\x01\x02\n\n\r\n\x05\x04\x05\x02\x03\
    \x05\x12\x04\xb3\x01\x0b\x11\n\r\n\x05\x04\x05\x02\x03\x01\x12\x04\xb3\
    \x01\x12#\n\r\n\x05\x04\x05\x02\x03\x03\x12\x04\xb3\x01&'\n\x0c\n\x04\
    \x04\x05\x02\x04\x12\x04\xb4\x01\x02&\n\r\n\x05\x04\x05\x02\x04\x04\x12\
    \x04\xb4\x01\x02\n\n\r\n\x05\x04\x05\x02\x04\x05\x12\x04\xb4\x01\x0b\x11\
    \n\r\n\x05\x04\x05\x02\x04\x01\x12\x04\xb4\x01\x12!\n\r\n\x05\x04\x05\
    \x02\x04\x03\x12\x04\xb4\x01$%\np\n\x04\x04\x05\x02\x05\x12\x04\xb9\x01\
    \x02.\x1a9\x20Partition\x20data\x20that\x20can\x20be\x20used\x20to\x20va\
    lidate\x20the\x20update.\n2'\x20Deprecated\x20IDs\x206\x20and\x207,\x20d\
    o\x20not\x20reuse.\n\n\r\n\x05\x04\x05\x02\x05\x04\x12\x04\xb9\x01\x02\n\
    \n\r\n\x05\x04\x05\x02\x05\x06\x12\x04\xb9\x01\x0b\x16\n\r\n\x05\x04\x05\
    \x02\x05\x01\x12\x04\xb9\x01\x17)\n\r\n\x05\x04\x05\x02\x05\x03\x12\x04\
    \xb9\x01,-\n\x0c\n\x04\x04\x05\x02\x06\x12\x04\xba\x01\x02.\n\r\n\x05\
    \x04\x05\x02\x06\x04\x12\x04\xba\x01\x02\n\n\r\n\x05\x04\x05\x02\x06\x06\
    \x12\x04\xba\x01\x0b\x16\n\r\n\x05\x04\x05\x02\x06\x01\x12\x04\xba\x01\
    \x17)\n\r\n\x05\x04\x05\x02\x06\x03\x12\x04\xba\x01,-\n\x8b\x02\n\x04\
    \x04\x05\x02\x07\x12\x04\xc0\x01\x02,\x1a\xfc\x01\x20In\x20addition\x20t\
    o\x20the\x20partition\x20update,\x20process\x20updates\x20for\x20additio\
    nal\n\x20files,\x20such\x20as\x20kernels.\x20Versions\x20of\x20update_en\
    gine\x20that\x20can\x20interpret\n\x20this\x20list\x20*MUST*\x20ignore\
    \x20noop_operations\x20and\x20properly\x20account\x20for\x20the\n\x20sig\
    nature\x20data\x20at\x20the\x20end\x20of\x20the\x20payload.\n\n\r\n\x05\
    \x04\x05\x02\x07\x04\x12\x04\xc0\x01\x02\n\n\r\n\x05\x04\x05\x02\x07\x06\
    \x12\x04\xc0\x01\x0b\x1b\n\r\n\x05\x04\x05\x02\x07\x01\x12\x04\xc0\x01\
    \x1c&\n\r\n\x05\x04\x05\x02\x07\x03\x12\x04\xc0\x01)+\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(InstallOperation::generated_message_descriptor_data());
            messages.push(Extent::generated_message_descriptor_data());
            messages.push(Signatures::generated_message_descriptor_data());
            messages.push(InstallInfo::generated_message_descriptor_data());
            messages.push(InstallProcedure::generated_message_descriptor_data());
            messages.push(DeltaArchiveManifest::generated_message_descriptor_data());
            messages.push(signatures::Signature::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(install_operation::Type::generated_enum_descriptor_data());
            enums.push(install_procedure::Type::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
